swagger: "2.0"
info:
  version: 1.0.0
  title: Apartment App
  description: This is the back end server for Khoj the search application.
  contact:
    name: Jarifa Mustafa
    email: jarifamustafa.aapshari@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:3000
basePath: /api
schemes: 
  - http
consumes: 
  - application/json
produces: 
  - application/json
paths:
  /users:
    get:
      tags:
        - Users
      description: |
        Returns all user from the system if the user is authenticated and has admin privilege
      operationId: getAllUser
      parameters:
        - name: pageSize
          in: query
          description: maximum number of results to return
          required: false
          type: integer
        - name: pageNumber
          in: query
          description: index of page, starts from 0 (zero)
          required: false
          type: integer
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
      responses:
        200:
          description: list of user objects
          schema:
            $ref: "#/definitions/Users"
        400: 
          description: response sent after pageSize or pageNumber is invalid
          schema:
            $ref: "#/definitions/Error"
        403: 
          description: response sent after authorization failure
          schema:
            $ref: "#/definitions/Error"
        404: 
          description: response sent after specified user not found
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
          - Users
      description: Creates a new user in the store. Duplicate email not allowed
      operationId: createUser
      parameters:
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
        - name: user
          in: body
          description: user information that needs to be stored
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/User"
          headers:
            x-auth-token:
              type: string
              description: a JWT token generated for authentication of future requests
        400: 
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Users
      description: Updates an user in the store.
      operationId: updateUser
      parameters:
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
        - name: user
          in: body
          description: user information that needs to be stored
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/User"
        400: 
          description: response sent after validation error occurred
          schema:
            $ref: "#/definitions/Error"
        403: 
          description: response sent after authorization failure
          schema:
            $ref: "#/definitions/Error"
        404: 
          description: response sent after specified user not found
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Users
      description: deletes a user, admin privilege required
      operationId: deleteSingleUser
      parameters:
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
        - name: _id
          in: body
          description: id of the user that admin wants to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: response sent after successful user deletion
          schema:
            $ref: "#/definitions/User"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
  /users/me:
    get:
      tags:
          - Users
      description: Returns user info of current logged in user
      operationId: profileInfo
      parameters:
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
      responses:
        200:
          description: user details 
          schema:
            $ref: "#/definitions/User"
        500:
          description: unexpected error
          schema:
            $ref: "#/definitions/Error"
  /users/{id}:
    get:
      tags:
          - Users
      description: Returns a user based on ID, admin privilege required
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          type: string
      responses:
        200:
          description: user details 
          schema:
            $ref: "#/definitions/User"
        500:
          description: unexpected error
          schema:
            $ref: "#/definitions/Error"
  /auth/login:
    post:
      tags:
        - Authentication
      description: lets a user login to the system
      operationId: login
      parameters:
        - name: user
          in: body
          description: user information that needs for login
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: response sent after successful login attempt
          schema:
            type: object
            properties:
              message:
                type: string
          headers:
            x-auth-token:
              type: string
              description: a JWT token generated for authentication of future requests
        400: 
          description: response sent after receiving invalid request
          schema:
            $ref: "#/definitions/Error"
  /advertisement:
    get:
      tags:
        - Advertisement
      description: Returns all advertisement from the system
      operationId: getAllAdvertisement
      parameters:
        - name: pageSize
          in: query
          description: maximum number of results to return
          required: false
          type: integer
        - name: pageNumber
          in: query
          description: index of page, starts from 0 (zero)
          required: false
          type: integer
      responses:
        200:
          description: array of advertisement objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Advertisements"
        400: 
          description: response sent after getting an invalid request
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Advertisement
      description: Creates a new advertisement in the db.
      operationId: creteAdvertisement
      parameters:
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
        - name: advertisement
          in: body
          description: advertisement information that needs to be stored
          required: true
          schema:
            $ref: "#/definitions/Advertisement"
      responses:
        200:
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/Advertisement"
        400:
          description: response sent after new advertisement creation
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Advertisement
      description: Updates an user in the store.
      operationId: updateAd
      parameters:
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
        - name: user
          in: body
          description: user information that needs to be stored
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/User"
        400: 
          description: response sent after validation error occurred
          schema:
            $ref: "#/definitions/Error"
        403: 
          description: response sent after authorization failure
          schema:
            $ref: "#/definitions/Error"
        404: 
          description: response sent after specified user not found
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Advertisement
      description: deletes a user, admin privilege required
      operationId: deleteAd
      parameters:
        - name: x-auth-token
          in: header
          description: JWT access token provided by server after authorization
          required: true
          type: string
        - name: _id
          in: body
          description: id of the user that admin wants to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: response sent after successful user deletion
          schema:
            $ref: "#/definitions/User"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
  /advertisement/${id}:
    get:
      tags:
        - Advertisement
      description: returns a single advertisement
      operationId: findAdvertisementById
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: The id of the advertisement of interest
      responses:
        200:
          description: a single advertisement object
          schema:
            $ref: "#/definitions/Advertisement"
        404: 
          description: response sent after not finding what the user is looking for
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
  /advertisement/getAdvertisementByUserId:
    get:
      tags:
        - Advertisement
      description: Returns all advertisement created by current user
      operationId: findAdvertisementsByUserId
      parameters:
        - name: pageSize
          in: query
          description: maximum number of results to return
          required: false
          type: integer
        - name: pageNumber
          in: query
          description: index of page, starts from 0 (zero)
          required: false
          type: integer
      responses:
        200:
          description: array of advertisement objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Advertisements"
        400: 
          description: response sent after getting an invalid request
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
  /advertisement/getAdvertisementByUserId/${id}:
    get:
      tags:
        - Advertisement
      description: advertisement by one particular user
      operationId: Admin findAdvertisementsByUserId
      parameters:
        - name: pageSize
          in: query
          description: maximum number of results to return
          required: false
          type: integer
        - name: pageNumber
          in: query
          description: index of page, starts from 0 (zero)
          required: false
          type: integer
        - name: id
          in: path
          required: true
          type: string
          description: The id of the user of interest
      responses:
        200:
          description: array of advertisement objects
          schema:
            type: array
            items:
              $ref: "#/definitions/Advertisements"
        400: 
          description: response sent after getting an invalid request
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after some unexpected error happened
          schema:
            $ref: "#/definitions/Error"
  /getAdvice:
    post:
      tags:
        - Advertisement
      description: request to get advice on houses inside a circle of choice
      operationId: getAdviceOnHouses
      parameters:
        - name: search criteria
          in: body
          description: search preferences that needs to be stored
          required: true
          schema:
            $ref: "#/definitions/Criteria"
      responses:
        200:
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/Advertisement"
        400:
          description: response sent after new advertisement creation
          schema:
            $ref: "#/definitions/Error"
        500: 
          description: response sent after new user creation
          schema:
            $ref: "#/definitions/Error"
  
definitions:
  User:
    type: object
    required:
      - name
      - email
      - password
    properties:
      _id: 
        type: string
        description: hash string generated by mongodb
      name:
        type: string
        description: name of the user
      email:
        type: string
        format: email
        description: email of the user
      password:
        type: string
        format: password
        description: password of the user
      isAdmin:
        type: boolean
        description: whether the user is admin or not
  Users:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: "#/definitions/User"
  Advertisement:
    type: object
    required:
      - name
      - is_rented
      - contact_number
      - lat
      - long
      - rent
      - sublet
      - month_of_availability
    properties:
      _id: 
        type: string
        description: hash string generated by mongodb
      name:
        type: string
        description: name of the house
        minLength: 5
        maxLength: 100
      user:
        type: string
        description: _id of the user
      created_on:
        type: number
        description: creation time in milisecond
      invalid_after: 
        type: number
        description: validity in milisecond, default validation period 31 days
      is_rented:
        type: boolean
        description: whether the apartment is rented
        default: false
      contact_number:
        type: string
        minLength: 11
        maxLength: 14
      alternative_contact:
        type: string
        minLength: 11
        maxLength: 14
      lat:
        type: number
      long:
        type: number
      address:
        type: string
      thana: 
        type: string
      postode: 
        type: string
      zilla:
        type: string
      rent:
        type: number
      size: 
        type: number
      floor:
        type: number
      security_guards:
        type: boolean
      lift_escalator:
        type: boolean
      parking:
        type: boolean
      sublet:
        type: boolean
      month_of_availability:
        type: string
        enum:
          - January
          - February
          - March 
          - April
          - May
          - June
          - July
          - August
          - September
          - October
          - November
          - December
      rooms:
        type: object
        properties:
          bedroom: 
            type: number
          bathroom: 
            type: number
          kitchen:
            type: number
          drawing:
            type: number
          living: 
            type: number
      nearby:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            name: 
              type: string
            place_id:
              type: string
            type: 
              type: string
              enum:
                - mosque
                - hospital
                - school
                - park
                - department_store
            distance:
              type: number
            lat: 
              type: number
            long:
              type: number
            vicinity:
              type: string
            photos:
              type: array
              items: 
                type: object
                properties:
                  height:
                    type: number
                  width:
                    type: number
                  html_attributions:
                    type: array
                    items:
                      type: string
                  photo_reference:
                    type: string
      images:
        type: array
        items:
          type: object
          properties: 
            tag: 
              type: string
            value:
              type: string
  Criteria:
    type: object
    required:
      - center_lat
      - center_long
      - radius
      - sublet
    properties:
      center_lat:
        type: number
        description: lattitude of the center
      center_long:
        type: number
        description: longitude of the center
      radius:
        type: number
        description: radius of the search circle
      sublet:
        type: boolean
        description: whether the user is lookig for sublet or not
      rent:
        type: object
        properties:
          value:
            type: number
            description: value of the preference of the user
          priority:
            $ref: "#/definitions/Priority"
      size: 
        type: object
        properties:
          value:
            type: number
            description: value of the preference of the user
          priority:
            $ref: "#/definitions/Priority"
      floor:
        type: object
        properties:
          value:
            type: number
            description: value of the preference of the user
          priority:
            $ref: "#/definitions/Priority"
      security_guards:
        type: object
        properties:
          value:
            type: boolean
            description: value of the preference of the user
          priority:
            $ref: "#/definitions/Priority"
      lift_escalator:
        type: object
        properties:
          value:
            type: boolean
            description: value of the preference of the user
          priority:
            $ref: "#/definitions/Priority"
      parking:
        type: object
        properties:
          value:
            type: boolean
            description: value of the preference of the user
          priority:
            $ref: "#/definitions/Priority"
      month_of_availability:
        type: object
        properties:
          value:
            type: string
            description: value of the preference of the user
            enum:
            - January
            - February
            - March 
            - April
            - May
            - June
            - July
            - August
            - September
            - October
            - November
            - December
          priority:
            $ref: "#/definitions/Priority"
      rooms:
        type: object
        properties:
          bedroom: 
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          bathroom: 
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          kitchen:
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          drawing:
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          living: 
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
      nearby:
        type: object
        properties:
          mosque: 
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          hospital: 
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          school:
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          park:
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
          departmental_store: 
            type: object
            properties:
              value:
                type: number
                description: value of the preference of the user
              priority:
                $ref: "#/definitions/Priority"
  Advertisements:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: "#/definitions/Advertisement"
  Error:
    type: object
    readOnly: true
    properties:
      message:
        type: string
        description: A short, human readable message about the error.
  Priority:
    type: string
    description: priority of preferences
    enum:
      - HIGHEST
      - HIGH
      - MEDIUM
      - LOW
      - LOWEST